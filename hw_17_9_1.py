# Напишите программу, которой на вход подается последовательность чисел через пробел, а также
# запрашивается у пользователя любое число. В качестве задания повышенного уровня сложности можете выполнить
# проверку соответствия указанному в условии ввода данных. Далее программа работает по следующему алгоритму:
# 1.Преобразование введённой последовательности в список
# 2.Сортировка списка по возрастанию элементов в нем (для реализации сортировки определите функцию)
# 3.Устанавливается номер позиции элемента, который меньше введенного пользователем числа, а следующий за ним
# больше или равен этому числу.
# При установке позиции элемента воспользуйтесь алгоритмом двоичного поиска, который был рассмотрен
# в этом модуле.Реализуйте его также отдельной функцией.
# Подсказка
# Помните, что у вас есть числа, которые могут не соответствовать заданному условию.В этом случае необходимо вывести
# # соответствующее сообщение

import math

# проверка соответствия указанному в условии ввода данных
array = []
while True:
    try:
        user_input = input("Введите последовательность чисел через пробел или exit для выхода: ")
        if user_input == 'exit':
            exit()
        array = list(map(int, [x for x in user_input.split()]))
        if not array:
            raise ValueError
        else:
            break
    except ValueError:
        print("В ВВОДЕ СОДЕРЖАТСЯ НЕ ЦИФРЫ ИЛИ ВВОД ПУСТОЙ")
while True:
    try:
        element = int(input("Введите любое число или exit для выхода: "))
        if user_input == 'exit':
            exit()
        if not int(element):
            raise ValueError
        else:
            break
    except ValueError:
        print("ВВЕДЕНО НЕ ЧИСЛО ИЛИ ВВОД ПУСТОЙ")


# сортируем пузырьком полученный список
def sorting_elements(array):
    for i in range(len(array)):
        for j in range(len(array) - i - 1):
            if array[j] > array[j + 1]:
                array[j], array[j + 1] = array[j + 1], array[j]
    return array


# вывод на экран упорядоченного списка
print(f"Список упорядоченный по возрастанию {sorting_elements(array)}")


# устанавливаем позицию элемента введеного пользователем
def binary_search(array, element, left, right):
    if left > right:  # если левая граница превысила правую,
        return False  # значит элемент отсутствует

    middle = (right + left) // 2  # находим середину списка
    if array[middle] == element:  # если элемент в середине,
        return middle  # возвращаем этот индекс
    if element < array[middle]:  # если элемент меньше элемента в середине
        # рекурсивно ищем в левой половине
        return binary_search(array, element, left, middle - 1)
    else:  # иначе в правой
        return binary_search(array, element, middle + 1, right)


# вызываем функцию бинарного поиска введенного пользователем числа
index_element_or_greater = binary_search(array, element, 0, array.index(array[-1]))
# находим  номер позиции элемента, который меньше введенного пользователем числа
index_lesser = index_element_or_greater - 1
# обработаем ситуацию, когда введеное число первое в отсортированном списке.
# соответственно число, меньше введенного отсуствует, выводим сообщение об этом
if index_lesser < 0:
    index_lesser = "Элемента с индексом меньше искомого нет."
# обработаем случай когда пользователь ввел число отсутствующее в последовательности
if index_element_or_greater == False:
    # найдем ближайшее число к введенному пользователем числу с помощью lambda- и min-функций элементов взятых по модулю
    closest_number = min(array, key=lambda x: abs(x - element))
    # рассмотрим случай когда введеное число больше ближайшего числа
    if closest_number < element:
        # находим индекс числа ближайшего к введенному
        index_lesser = array.index(closest_number)
        # получаем индекс числа больше введенного
        index_element_or_greater = index_lesser + 1
        # если число больше искомого выходит за пределы списка, выводим сообщение, что такого элемента нет
        if index_element_or_greater > array.index(array[-1]):
            index_element_or_greater = "элемента с индексом, большим искомого нет."
    # рассмотрим случай когда введеное число меньше ближайшего числа
    else:
        # находим индекс числа ближайшего к введенному
        index_element_or_greater = array.index(closest_number)
        # получаем индекс числа меньше введенного
        index_lesser = index_element_or_greater - 1
        # если числа меньше искомого нет, выводим ссответствующее сообщение
        if index_lesser < 0:
            index_lesser = "элемента с индексом меньше искомого нет."

# вывод на экран результата
print(f"индекс элемента, который меньше введенного пользователем числа: {index_lesser}")
